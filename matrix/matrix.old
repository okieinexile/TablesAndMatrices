#ifndef MATRIX_H
#define MATRIX_H

#include"../integer_table/integer_table.h"


class Matrix: public IntegerTable
{
	public:
		Matrix(void);
		Matrix(size_t r, size_t c);
		Matrix(size_t r);
		Matrix(const std::string& filename);
		//Matrix copy(void);
		//std::vector<int> vector_product(std::vector<int> v, std::vector<int> w);
		//int dot_product(std::vector<int> v, std::vector<int> w);
		//int sum(std::vector<int> v);
		//Matrix multiply(Matrix other);
		//Matrix operator*(const Matrix& other);
		//Matrix add(Matrix other);
		//Matrix operator+(const Matrix& other);
		//Matrix scalar_multiply(int scalar);
		//void add_row_multiple(int scalar, size_t r1, size_t r2);
		//void swap_rows(size_t r1, size_t r2);
		//void combine_rows(size_t r1, size_t r2, int a, int b, int c, int d);
		//void add_column_multiple(int scalar, size_t c1, size_t c2);
		//void swap_columns(size_t c1, size_t c2);
		//void combine_columns(size_t c1, size_t c2, int a, int b, int c, int d);
		//Matrix transpose(void);
		//Matrix left_identity(void);
		//Matrix right_identity(void);
};

Matrix::Matrix(void) : IntegerTable(){/* Do nothing */}

Matrix::Matrix(size_t r, size_t c) : IntegerTable(r, c){/* Do nothing */}

Matrix::Matrix(size_t r) : IntegerTable(r, r)
{
    for(size_t i = 0; i < r; ++i) this->set_entry(1,i,i);
}

Matrix::Matrix(const std::string& filename) : IntegerTable(filename){/* Do nothing */}

Matrix Matrix::copy(void)
		{
			Matrix out;
			for(size_t r = 0; r < this->rows(); ++r)
            {
                std::vector<int> myrow = this->copy_row(r);
                out.append_row(myrow);
            }
            return out;
		}

std::vector<int> Matrix::vector_product(std::vector<int> v, std::vector<int> w)
{
    std::vector<int> out;
    size_t common = v.size();
    if (w.size() == common)
    {
        for(size_t i = 0; i < common; i++)
        {
            out.push_back(v[i] * w[i]);
        }
        return out;
    }
    else{
        throw "Vectors are not compatible.";
    }
}

int Matrix::dot_product(std::vector<int> v, std::vector<int> w)
{
    return this->sum(vector_product(v,w));
}

int Matrix::sum(std::vector<int> v)
{
    int total = 0;
    for(size_t i = 0; i < v.size(); i++)
    {
        total += v[i];
    }
    return total;
}

Matrix Matrix::multiply(Matrix other)
{
    Matrix out(this->rows(), other.columns());
    if (this->columns() != other.rows())
    {
        throw "Columns of left must equal rows of right";
    }
    for(size_t r = 0; r < out.rows(); r++)
    {
        for(size_t c = 0; c < out.columns(); c++)
        {
            out.set_entry(dot_product(copy_row(r), other.copy_column(c)), r,c);
        }
    }
    return out;
}

Matrix Matrix::operator*(const Matrix& other)
{
    Matrix out;
    out = this->multiply(other);
    return out;
}

Matrix Matrix::add(Matrix other)
{
    if((this->rows() != other.rows()) || (this->columns() != other.columns())){
        throw "Dimensions must be equal";
    }
    Matrix out(this->rows(), this->columns());
    for(size_t r = 0; r < this->rows(); ++r)
    {
        for(size_t c = 0; c < this->columns(); ++c)
        {
            out.set_entry(this->read_entry(r,c) + other.read_entry(r,c), r, c );
        }
    }
    return out;
}

Matrix Matrix::operator+(const Matrix& other)
		{
			Matrix out = this->add(other);
			return out;
		}
Matrix Matrix::scalar_multiply(int scalar)
{
    Matrix out = this->copy();
    for(size_t r = 0; r < out.rows(); ++r)
    {
        for(size_t c = 0; c < out.columns(); ++c)
        {
            out.set_entry(scalar * out.read_entry(r, c), r, c);
        }
    }
    return out;
}

void Matrix::add_row_multiple(int scalar, size_t r1, size_t r2)
		{
			for(size_t c = 0; c < this->columns(); ++c)
            {
				this->set_entry(scalar * this->read_entry(r1,c) + this->read_entry(r2, c), r2, c);
			}
		}

void Matrix::swap_rows(size_t r1, size_t r2)
{
    if( !(r1 < this->rows()) || !(r2 < this->rows()) ) throw "swap rows: row size out of bounds!";
    for(size_t c = 0; c < this->columns(); c++)
    {
        int v1 = this->read_entry(r1, c);
        int v2 = this->read_entry(r2, c);
        this->set_entry(v2, r1, c);
        this->set_entry(v1, r2, c);
    }
}

void Matrix::combine_rows(size_t r1, size_t r2, int a, int b, int c, int d)
{
    for(size_t i = 0; i < this->columns(); i++ )
    {
        int e1 = a * this->read_entry(r1, i) + b * this->read_entry(r2,i);
        int e2 = c * this->read_entry(r1, i) + d * this->read_entry(r2,i);
        this->set_entry(e1, r1, i);
        this->set_entry(e2, r2, i);
    }
}

void Matrix::add_column_multiple(int scalar, size_t c1, size_t c2)
{
    for(size_t r = 0; r < this->rows(); r++)
    {
        this->set_entry(scalar * this->read_entry(r,c1) + this->read_entry(r, c2),  r, c2);
    }
}

void Matrix::swap_columns(size_t c1, size_t c2)
{
    if( !(c1 < this->columns()) || !(c2 < this->columns()) ) throw "swap columns: column size out of bounds!";
    for(size_t r = 0; r < this->rows(); r++)
    {
        int v1 = this->read_entry(r, c1);
        int v2 = this->read_entry(r, c2);
        this->set_entry(v2, r, c1);
        this->set_entry(v1, r, c2 );
    }
}

void Matrix::combine_columns(size_t c1, size_t c2, int a, int b, int c, int d)
{
    for(size_t i = 0; i < this->columns(); i++ )
    {
        int e1 = a * this->read_entry(i, c1) + b * this->read_entry(i,c2);
        int e2 = c * this->read_entry(i, c1) + d * this->read_entry(i,c2);
        this->set_entry(e1, i, c1);
        this->set_entry(e2, i, c2);
    }
}

Matrix Matrix::transpose(void)
{
    Matrix out(this->columns(), this->rows());
    for(size_t r = 0; r < out.rows(); r++)
    {
        for(size_t c = 0; c < out.columns(); c++)
        {
            out.set_entry(this->read_entry(c,r), r, c);
        }
    }
    return out;
}

Matrix Matrix::left_identity(void)
{
    Matrix out(this->rows(), this->rows());
    for(size_t i = 0; i < this->rows(); ++i)
    {
        out.set_entry(1, i, i);
    }
    return out;
}

Matrix Matrix::right_identity(void)
{
    Matrix out(this->columns(), this->columns());
    for(size_t i = 0; i < this->columns(); ++i)
    {
        out.set_entry(1, i, i);
    }
    return out;
}

#endif
